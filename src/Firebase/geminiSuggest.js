import axios from "axios";
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);

export const getMovieSuggestions = async (currentMovie, refreshIndex = 0) => {
  try {
    console.log(" G·ª£i √Ω l·∫°i l·∫ßn:", refreshIndex);
    const categoryList = currentMovie.category || [];
const genreSlug = categoryList.length > 0
  ? categoryList[Math.floor(Math.random() * categoryList.length)]?.slug
  : null;

    console.log(" Th·ªÉ lo·∫°i ch√≠nh:", genreSlug);

    const res = await axios.get(
      `https://phimapi.com/v1/api/the-loai/${genreSlug}?page=1&limit=15`
    );

    let movieList = res.data.data.items || [];

    const compactMovieList = movieList
      .map(({ name, origin_name, slug, thumb_url, content }) => {
        const validThumb = thumb_url?.startsWith("http")
          ? thumb_url
          : `https://phimimg.com/${thumb_url}`;
        return {
          name,
          origin_name,
          slug,
          thumb_url: validThumb,
          content: content || "",
        };
      })
      .filter(movie => movie.thumb_url.startsWith("http"));

    console.log("üé¨ Danh s√°ch phim h·ª£p l·ªá g·ª≠i Gemini:", compactMovieList);

    const listString = JSON.stringify(compactMovieList, null, 2);

    const prompt = `
Phim ƒëang xem:
T√™n: ${currentMovie.name}
Th·ªÉ lo·∫°i: ${categoryList.map(c => c.name).join(", ")}
M√¥ t·∫£: ${currentMovie.content}
L·∫ßn g·ª£i √Ω: ${refreshIndex}

B·∫°n h√£y ch·ªçn cho ng∆∞·ªùi d√πng 7 phim trong danh s√°ch sau : ${listString}

Y√™u c·∫ßu:
- N·∫øu ƒë√¢y l√† l·∫ßn g·ª£i √Ω l·∫°i (refreshIndex > 0), b·∫°n b·∫Øt bu·ªôc ph·∫£i thay ƒë·ªïi √≠t nh·∫•t 5 phim so v·ªõi danh s√°ch ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥.
- B·∫°n KH√îNG th·ªÉ ch·ªâ ƒë·ªïi ch·ªó 6 b·ªô phim ‚Äì b·∫Øt bu·ªôc ph·∫£i ch·ªçn √≠t nh·∫•t 5 phim m·ªõi.
- Ch·ªâ ƒë∆∞·ª£c ch·ªçn ƒë√∫ng 7 phim t·ª´ danh s√°ch tr√™n (KH√îNG ƒë∆∞·ª£c t·ª± b·ªãa ho·∫∑c th√™m m·ªõi).
- KH√îNG ƒë∆∞·ª£c ƒë·ªïi ho·∫∑c t·∫°o m·ªõi link ·∫£nh thumb_url.
- Tr·∫£ k·∫øt qu·∫£ duy nh·∫•t d∆∞·ªõi d·∫°ng JSON h·ª£p l·ªá (b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]).
- KH√îNG th√™m gi·∫£i th√≠ch ho·∫∑c vƒÉn b·∫£n b√™n ngo√†i JSON.
- M·ªói ph·∫ßn t·ª≠ g·ªìm c√°c tr∆∞·ªùng sau:
  - name: T√™n phim
  - slug: slug phim
  - origin_name: T√™n g·ªëc
  - thumb_url: ƒê∆∞·ªùng d·∫´n ·∫£nh minh h·ªça
  - ly_do: G·ªìm 2 ph·∫ßn:
    + T√≥m t·∫Øt n·ªôi dung ng·∫Øn g·ªçn c·ªßa phim (1‚Äì2 c√¢u).
    + Gi·∫£i th√≠ch v√¨ sao phim n√†y ƒë∆∞·ª£c ch·ªçn, d·ª±a tr√™n s·ª± t∆∞∆°ng ƒë·ªìng v·ªõi phim ƒëang xem (v·ªÅ th·ªÉ lo·∫°i, ch·ªß ƒë·ªÅ, c·∫£m x√∫c, nh√¢n v·∫≠t, b·ªëi c·∫£nh...).
`.trim();


    const model = genAI.getGenerativeModel({ model: "models/gemini-2.0-flash" });
    const result = await model.generateContent(prompt);
    const text = result.response.text().trim();

    console.log(" K·∫øt qu·∫£ text t·ª´ Gemini:\n", text);

    const matches = text.match(/\[\s*{[\s\S]*?}\s*]/);
    if (!matches) throw new Error(" Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong ph·∫£n h·ªìi Gemini.");

    const parsed = JSON.parse(matches[0]);
    console.log(" JSON parse th√†nh c√¥ng:\n", parsed);

    const validThumbs = new Set(compactMovieList.map(m => m.thumb_url));
    const safeParsed = parsed
      .filter(p => validThumbs.has(p.thumb_url))
      .map(p => ({
        name: p.name || "Kh√¥ng r√µ",
        slug: p.slug || "",
        origin_name: p.origin_name || "",
        thumb_url: p.thumb_url,
        ly_do: p.ly_do || "Phim c√≥ n·ªôi dung t∆∞∆°ng t·ª±."
      }));

    console.log(" K·∫øt qu·∫£ sau l·ªçc h·ª£p l·ªá:\n", safeParsed);

    return safeParsed;
  } catch (err) {
    console.error(" L·ªói g·ªçi getMovieSuggestions:", err);
    return [];
  }
};
